// Generated by CoffeeScript 1.9.1
(function() {
  var _SOCKET_TEMPLATE_, _cpFile, _ensureExists, _insertTempl, cp2Folder, err, fileCategorize, fs, getTempl, insertSocket, path, res500, rmFile, sortAlphaNum, sortFiles, tempCache;

  fs = require("fs");

  path = require("path");

  _SOCKET_TEMPLATE_ = "<script src=\"/socket.io/socket.io.js\"></script>\n<script src=\"/f5static/refresh.js\"></script>";

  tempCache = {};

  getTempl = function(file) {
    var templDir;
    if (file in tempCache) {
      return tempCache[file];
    }
    templDir = path.join(__dirname, '..', './template/');
    file = templDir + file;
    return tempCache[file] = "" + (fs.readFileSync(file));
  };

  _insertTempl = function(file, templ) {
    var matchrx;
    matchrx = /<\/\s*body\s*>(?![^]*<\/\s*body\s*>)/gi;
    if (!file.search(matchrx)) {
      return file += templ.join('');
    } else {
      return RegExp.leftContext + templ.join('\n') + '\n' + RegExp.lastMatch + RegExp.rightContext;
    }
  };

  insertSocket = function(file) {
    return _insertTempl(file, [_SOCKET_TEMPLATE_]);
  };

  res500 = function(err, res) {
    res.writeHead(500, {
      "Content-Type": "text/plain"
    });
    return res.end(err);
  };

  rmFile = function(file) {
    return fs.exists(file, function(isexists) {
      if (isexists) {
        return fs.unlinkSync(file, function(err) {
          if (err) {
            throw err;
          }
        });
      } else {

      }
    });
  };

  sortAlphaNum = function(a, b) {
    var aAlpha, aNumber, bAlpha, bNumber, reAlpha, reNumer;
    reAlpha = /[^a-zA-Z]/g;
    reNumer = /[^0-9]/g;
    aAlpha = a.replace(reAlpha, "");
    bAlpha = b.replace(reAlpha, "");
    if (aAlpha === bAlpha) {
      aNumber = parseInt(a.replace(reNumer, ""), 10);
      bNumber = parseInt(b.replace(reNumer, ""), 10);
      return aNumber === bNumber ? 0 : aNumber > bNumber ? 1 : -1;
    } else {
      return aAlpha > bAlpha ? 1 : -1;
    }
  };

  sortFiles = function(realPath, files) {
    var _files, _folders, file, i, len;
    _folders = [];
    _files = [];
    files = files.sort(sortAlphaNum);
    if (realPath[realPath.length - 1] !== "/") {
      realPath += "/";
    }
    for (i = 0, len = files.length; i < len; i++) {
      file = files[i];
      if (!fs.existsSync(realPath + file)) {
        continue;
      }
      if (fs.statSync(realPath + file).isDirectory()) {
        _folders.push(file);
      } else {
        _files.push(file);
      }
    }
    return _folders.concat(_files);
  };

  _cpFile = function(src, tg) {
    var rs, ws;
    src = path.normalize(src);
    _ensureExists(path.dirname(tg));
    rs = fs.createReadStream(src);
    ws = fs.createWriteStream(tg);
    console.log(src, "->", tg);
    debugger;
    return rs.pipe(ws);
  };

  cp2Folder = function(tgFolder, src, cb) {
    var tg;
    _ensureExists(tgFolder);
    tg = path.join(tgFolder, src);
    _cpFile(src, tg);
    return cb && cb(src, tg);
  };

  _ensureExists = function(dir) {
    var exists, parentDir;
    exists = fs.existsSync(dir);
    parentDir = path.join.apply(null, dir.split(path.sep).slice(0, -1));
    if (!exists) {
      _ensureExists(parentDir);
      return fs.mkdirSync(dir);
    }
  };

  fileCategorize = function(ext) {
    var filetype;
    filetype = '';
    switch (ext) {
      case 'css':
        filetype = 'css';
        break;
      case 'html':
      case 'htm':
        filetype = 'html';
        break;
      case 'js':
      case 'coffee':
        filetype = 'javascript';
        break;
      case 'jpg':
      case 'jpeg':
      case 'gif':
      case 'png':
        filetype = 'image';
        break;
      case 'psd':
        filetype = 'psd';
        break;
      case 'rar':
      case 'zip':
      case '7z':
        filetype = 'zipfile';
        break;
      default:
        filetype = 'defaulttype';
    }
    return filetype;
  };

  exports.getTempl = getTempl;

  exports.insertSocket = insertSocket;

  exports.res500 = res500;

  exports.sortFiles = sortFiles;

  exports.cp2Folder = cp2Folder;

  exports.rmFile = rmFile;

  exports.fileCategorize = fileCategorize;

  try {
    exports.version = JSON.parse(fs.readFileSync(__dirname + "/../package.json")).version;
  } catch (_error) {
    err = _error;
    exports.version = '0.0.0';
  }

}).call(this);
