// Generated by CoffeeScript 1.9.1
(function() {
  var SOCKET_TEMPLATE, cp2Folder, cpFile, createServer, ejs, ensureExists, err, f5DeleteFile, fs, getTempl, http, ignore_re, insertSocket, insertTempl, io, path, querystring, renderDir, res500, run, sortAlphaNum, sortFiles, tempCache, types, url, utils, watch;

  http = require("http");

  io = require("socket.io");

  ejs = require("ejs");

  url = require("url");

  fs = require("fs");

  path = require("path");

  types = require("mime").types;

  utils = require('util');

  querystring = require('querystring');


  watch = require('node-watch');

  ignore_re = /([\\\/]\.|.*~$)/;

  SOCKET_TEMPLATE = "<script src=\"/socket.io/socket.io.js\"></script>\n<script src=\"/f5static/refresh.js\"></script>";

  tempCache = {};

  getTempl = function(file) {
    var templDir;
    if (file in tempCache) {
      return tempCache[file];
    }
    templDir = path.join(__dirname, '..', './template/');
    file = templDir + file;
    return tempCache[file] = "" + (fs.readFileSync(file));
  };

  insertTempl = function(file, templ) {
    var matchrx;
    matchrx = /<\/\s*body\s*>(?![^]*<\/\s*body\s*>)/gi;
    if (!file.search(matchrx)) {
      return file += templ.join('');
    } else {
      return RegExp.leftContext + templ.join('\n') + '\n' + RegExp.lastMatch + RegExp.rightContext;
    }
  };

  insertSocket = function(file) {
    return insertTempl(file, [SOCKET_TEMPLATE]);
  };

  res500 = function(err, res) {
    res.writeHead(500, {
      "Content-Type": "text/plain"
    });
    return res.end(err);
  };

  f5DeleteFile = function(file) {
    return fs.exists(file, function(isexists) {
      if (isexists) {
        return fs.unlinkSync(file, function(err) {
          if (err) {
            throw err;
          }
        });
      } else {

      }
    });
  };

  sortAlphaNum = function(a, b) {
    var aAlpha, aNumber, bAlpha, bNumber, reAlpha, reNumer;
    reAlpha = /[^a-zA-Z]/g;
    reNumer = /[^0-9]/g;
    aAlpha = a.replace(reAlpha, "");
    bAlpha = b.replace(reAlpha, "");
    if (aAlpha === bAlpha) {
      aNumber = parseInt(a.replace(reNumer, ""), 10);
      bNumber = parseInt(b.replace(reNumer, ""), 10);
      return aNumber === bNumber ? 0 : aNumber > bNumber ? 1 : -1;
    } else {
      return aAlpha > bAlpha ? 1 : -1;
    }
  };

  sortFiles = function(realPath, files) {
    var _files, _folders, file, i, len;
    _folders = [];
    _files = [];
    files = files.sort(sortAlphaNum);
    if (realPath[realPath.length - 1] !== "/") {
      realPath += "/";
    }
    for (i = 0, len = files.length; i < len; i++) {
      file = files[i];
      if (!fs.existsSync(realPath + file)) {
        continue;
      }
      if (fs.statSync(realPath + file).isDirectory()) {
        _folders.push(file);
      } else {
        _files.push(file);
      }
    }
    return _folders.concat(_files);
  };

  renderDir = function(realPath, files) {
    var _extname, _files, _path, file, filetype, html, i, len;
    files = sortFiles(realPath, files);
    if (realPath[realPath.length - 1] !== "/") {
      realPath += "/";
    }
    html = [];
    html.push("<ul>");
    for (i = 0, len = files.length; i < len; i++) {
      file = files[i];
      if (file[0] === '.') {
        continue;
      }
      _path = realPath + file;
      if (fs.statSync(_path).isDirectory()) {
        _files = fs.readdirSync(_path);
        html.push(ejs.render(getTempl("dir.ejs"), {
          _path: _path.slice(1),
          file: file,
          subdir: renderDir(_path, _files)
        }));
      } else {
        _extname = path.extname(file);
        _extname = _extname.length ? _extname.substr(1) : "";
        filetype = '';
        switch (_extname) {
          case 'css':
            filetype = 'css';
            break;
          case 'html':
          case 'htm':
            filetype = 'html';
            break;
          case 'js':
          case 'coffee':
            filetype = 'javascript';
            break;
          case 'jpg':
          case 'jpeg':
          case 'psd':
          case 'gif':
          case 'png':
            filetype = 'image';
            break;
          case 'rar':
          case 'zip':
          case '7z':
            filetype = 'zipfile';
            break;
          default:
            filetype = 'defaulttype';
        }
        html.push(ejs.render(getTempl("file.ejs"), {
          filetype: filetype,
          _path: _path.slice(1),
          file: file
        }));
      }
    }
    html.push("</ul>");
    return html.join("");
  };

  cpFile = function(src, tg) {
    var rs, ws;
    src = path.normalize(src);
    ensureExists(path.dirname(tg));
    rs = fs.createReadStream(src);
    ws = fs.createWriteStream(tg);
    console.log(src, "->", tg);
    debugger;
    return rs.pipe(ws);
  };

  cp2Folder = function(tgFolder, src, cb) {
    var tg;
    ensureExists(tgFolder);
    tg = path.join(tgFolder, src);
    cpFile(src, tg);
    return cb && cb(src, tg);
  };

  ensureExists = function(dir) {
    var exists, parentDir;
    exists = fs.existsSync(dir);
    parentDir = path.join.apply(null, dir.split(path.sep).slice(0, -1));
    if (!exists) {
      ensureExists(parentDir);
      return fs.mkdirSync(dir);
    }
  };

  createServer = function(config) {
    var _io, _path, _port, _sockets, ref, server, sockets;
    _path = config.path;
    _port = config.port;
    server = http.createServer(function(req, res) {
      var pathname, realPath, renderPath, text;
      pathname = url.parse(req.url).pathname;
      if (req.method === 'POST') {
        if (pathname.match(/^\/f5api\//)) {
          text = '';
          req.on('data', function(chunk) {
            return text += chunk;
          });
          req.on('end', function() {
            var file, files, i, len;
            console.log(text);
            files = querystring.parse(text)['sel'];
            if (!files) {
              res.end('No file packed');
              return;
            }
            if (!Array.isArray(files)) {
              files = new Array(files);
            }
            fs.rmdir('./f5picker/', function() {
              debugger;
            });
            res.write("<ul>");
            for (i = 0, len = files.length; i < len; i++) {
              file = files[i];
              debugger;
              cp2Folder('./f5picker/', './' + file, function(src, tg) {
                src = path.normalize(src);
                tg = path.normalize(tg);
                return res.write("<li>F5: copy <b>" + src + "</b> to <b>" + tg + "</b>!</li>");
              });
            }
            res.write("</ul>");
            return res.end();
          });
        } else if (req.method.toUpperCase() === 'GET') {
          res.write('f5api GET respone');
        }
      }
      realPath = decodeURIComponent(_path + pathname);
      renderPath = realPath;
      if ((realPath.split("/"))[1] === 'f5static') {
        realPath = path.join(__dirname, '..', realPath);
      }
      return fs.exists(realPath, function(exists) {
        var ext;
        if (!exists) {
          res.writeHead(404, {
            "Content-Type": "text/html"
          });
          res.write(ejs.render(getTempl("404.ejs"), {
            _htmltext: "404 Not Found: url " + req.url,
            title: "404 Not Found"
          }));
          return res.end();
        } else if (fs.statSync(realPath).isDirectory()) {
          return fs.readdir(realPath, function(err, files) {
            var _htmltext;
            if (err) {
              return res500(err, res);
            } else {
              res.writeHead(200, {
                "Content-Type": types["html"]
              });
              _htmltext = renderDir(renderPath, files);
              res.write(ejs.render(getTempl("tree.ejs"), {
                _htmltext: _htmltext,
                title: realPath,
                version: exports.version,
                root_path: fs.realpathSync('.')
              }));
              return res.end();
            }
          });
        } else {
          ext = path.extname(realPath);
          if (ext) {
            ext = ext.slice(1);
          } else {
            ext = "unknown";
          }
          res.setHeader("Content-Type", types[ext] || "text/plian");
          return fs.readFile(realPath, "binary", function(err, file) {
            if (err) {
              return res500(err, res);
            } else {
              res.writeHead(200, "Ok");
              if (ext === "html" || ext === "htm") {
                file = insertSocket(file);
              }
              res.write(file, "binary");
              return res.end();
            }
          });
        }
      });
    });
    _sockets = [];
    _io = (ref = io.listen(server, {
      "log level": 0
    }), sockets = ref.sockets, ref);
    sockets.on("connection", function(socket) {
      _sockets = _sockets.filter(function(s) {
        return !s['disconnected'];
      });
      _sockets.push(socket);
      socket.on("delete", function(file) {
        return f5DeleteFile(file);
      });
      socket.on("rename", function(data) {
        return f5Rename(data);
      });
      return socket.on('quit', function(data) {
        console.log('f5 quiting...');
        return process.exit(0);
      });
    });
    watch('.', function(filename) {
      var f5path, i, len, normalize_file, socket;
      normalize_file = './' + filename.replace(/\\/g, '/');
      if (ignore_re.test(normalize_file)) {
        return;
      }
      console.log('changed file:', normalize_file);
      for (i = 0, len = _sockets.length; i < len; i++) {
        socket = _sockets[i];
        socket.emit('reload', normalize_file);
        console.log('emit reload', '--', normalize_file, '--', (new Date).toString());
      }
    });
    server.listen(_port);
    return console.log("f5 is on localhost:" + _port + " now.");
  };

  try {
    exports.version = JSON.parse(fs.readFileSync("" + __dirname + "/../package.json")).version;
  } catch (_error) {
    err = _error;
    exports.version = '0.0.0';
  }

  exports.createServer = createServer;

}).call(this);
