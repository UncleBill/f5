// Generated by CoffeeScript 1.9.1
(function() {
  var api, createServer, ejs, fs, http, ignore_re, io, path, querystring, renderDir, run, types, url, util, watch;

  http = require("http");

  io = require("socket.io");

  ejs = require("ejs");

  url = require("url");

  fs = require("fs");

  path = require("path");

  types = require("mime").types;

  util = require('./util');

  run = require('./run');

  api = require('./api');

  querystring = require('querystring');

  watch = require('node-watch');

  ignore_re = /([\\\/]\.|.*~$)/;

  renderDir = function(realPath, files) {
    var _extname, _files, _path, file, filetype, html, i, len;
    files = util.sortFiles(realPath, files);
    if (realPath[realPath.length - 1] !== "/") {
      realPath += "/";
    }
    html = [];
    html.push("<ul>");
    for (i = 0, len = files.length; i < len; i++) {
      file = files[i];
      if (file[0] === '.') {
        continue;
      }
      _path = realPath + file;
      if (fs.statSync(_path).isDirectory()) {
        _files = fs.readdirSync(_path);
        html.push(ejs.render(util.getTempl("dir.ejs"), {
          _path: _path.slice(1),
          file: file,
          subdir: renderDir(_path, _files)
        }));
      } else {
        _extname = path.extname(file);
        _extname = _extname.length ? _extname.substr(1) : "";
        filetype = '';
        switch (_extname) {
          case 'css':
            filetype = 'css';
            break;
          case 'html':
          case 'htm':
            filetype = 'html';
            break;
          case 'js':
          case 'coffee':
            filetype = 'javascript';
            break;
          case 'jpg':
          case 'jpeg':
          case 'psd':
          case 'gif':
          case 'png':
            filetype = 'image';
            break;
          case 'rar':
          case 'zip':
          case '7z':
            filetype = 'zipfile';
            break;
          default:
            filetype = 'defaulttype';
        }
        html.push(ejs.render(util.getTempl("file.ejs"), {
          filetype: filetype,
          _path: _path.slice(1),
          file: file
        }));
      }
    }
    html.push("</ul>");
    return html.join("");
  };

  createServer = function(config) {
    var _io, _path, _port, _sockets, ref, server, sockets;
    _path = config.path;
    _port = config.port;
    server = http.createServer(function(req, res) {
      var pathname, realPath, renderPath, urlobj;
      urlobj = url.parse(req.url);
      pathname = urlobj.pathname;
      if (/^\/f5api\b/.test(pathname)) {
        switch (req.method.toUpperCase()) {
          case 'POST':
            api.postHandler(req, res);
            break;
          case 'GET':
            api.getHandler(req, res);
        }
      }
      realPath = decodeURIComponent(_path + pathname);
      renderPath = realPath;
      if ((realPath.split("/"))[1] === 'f5static') {
        realPath = path.join(__dirname, '..', realPath);
      }
      return fs.exists(realPath, function(exists) {
        var ext;
        if (!exists) {
          res.writeHead(404, {
            "Content-Type": "text/html"
          });
          res.write(ejs.render(util.getTempl("404.ejs"), {
            _htmltext: "404 Not Found: url " + req.url,
            title: "404 Not Found"
          }));
          return res.end();
        } else if (fs.statSync(realPath).isDirectory()) {
          return fs.readdir(realPath, function(err, files) {
            var _htmltext;
            if (err) {
              return util.res500(err, res);
            } else {
              res.writeHead(200, {
                "Content-Type": types["html"]
              });
              _htmltext = renderDir(renderPath, files);
              res.write(ejs.render(util.getTempl("tree.ejs"), {
                _htmltext: _htmltext,
                title: realPath,
                version: exports.version,
                root_path: fs.realpathSync('.')
              }));
              return res.end();
            }
          });
        } else {
          ext = path.extname(realPath);
          if (ext) {
            ext = ext.slice(1);
          } else {
            ext = "unknown";
          }
          res.setHeader("Content-Type", types[ext] || "text/plian");
          return fs.readFile(realPath, "binary", function(err, file) {
            if (err) {
              return util.res500(err, res);
            } else {
              res.writeHead(200, "Ok");
              if (ext === "html" || ext === "htm") {
                file = util.insertSocket(file);
              }
              res.write(file, "binary");
              return res.end();
            }
          });
        }
      });
    });
    _sockets = [];
    _io = (ref = io.listen(server, {
      "log level": 0
    }), sockets = ref.sockets, ref);
    sockets.on("connection", function(socket) {
      _sockets = _sockets.filter(function(s) {
        return !s['disconnected'];
      });
      _sockets.push(socket);
      socket.on("delete", function(file) {
        return util.rmFile(file);
      });
      socket.on("rename", function(data) {
        return f5Rename(data);
      });
      return socket.on('quit', function(data) {
        console.log('f5 quiting...');
        return process.exit(0);
      });
    });
    watch('.', function(filename) {
      var f5path, i, len, normalize_file, socket;
      normalize_file = './' + filename.replace(/\\/g, '/');
      if (ignore_re.test(normalize_file)) {
        return;
      }
      console.log('changed file:', normalize_file);
      debugger;
      if (filename === 'f5file.js') {
        console.log('[f5]', 'Reload f5file.');
        f5path = path.resolve('.', 'f5file.js');
        delete require.cache[require.resolve(f5path)];
        run = require(f5path);
      }
      run["do"](filename);
      for (i = 0, len = _sockets.length; i < len; i++) {
        socket = _sockets[i];
        socket.emit('reload', normalize_file);
        console.log('emit reload', '--', normalize_file, '--', (new Date).toString());
      }
    });
    server.listen(_port);
    return console.log("f5 is on localhost:" + _port + " now.");
  };

  exports.version = util.version;

  exports.createServer = createServer;

}).call(this);
