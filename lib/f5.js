// Generated by CoffeeScript 1.3.3
(function() {
  var SOCKET_TEMPLATE, createServer, fs, http, insertSocket, io, path, renderDir, res500, types, url, watcher;

  http = require("http");

  io = require("socket.io");

  url = require("url");

  fs = require("fs");

  path = require("path");

  types = require("./mime").types;

  watcher = require("watch-tree-maintained").watchTree(".", {
    "ignore": "^\..*|~$|\\.swp$"
  });

  SOCKET_TEMPLATE = "<script src=\"/socket.io/socket.io.js\"></script>\n<script>\n	var socket = io.connect('http://localhost');\n	socket.on('reload', function (data) {\n		window.location.reload();\n	});\n</script>	";

  insertSocket = function(file) {
    var index;
    index = file.indexOf("</body>");
    if (index === -1) {
      return file += SOCKET_TEMPLATE;
    } else {
      return file = file.slice(0, index) + SOCKET_TEMPLATE + file.slice(index);
    }
  };

  res500 = function(err, res) {
    res.writeHead(500, {
      "Content-Type": "text/plain"
    });
    return res.end(err);
  };

  renderDir = function(realPath, files) {
    var file, html, _i, _len;
    if (realPath[realPath.length - 1] !== "/") {
      realPath += "/";
    }
    html = [];
    html.push("<ul>");
    if (realPath !== "./") {
      html.push("<li><a href='../'>..</a></li>");
    }
    for (_i = 0, _len = files.length; _i < _len; _i++) {
      file = files[_i];
      if (fs.statSync(realPath + file).isDirectory()) {
        html.push("<li><a href='./" + file + "/'>" + file + "</a></li>");
      } else {
        html.push("<li><a href='./" + file + "'>" + file + "</a></li>");
      }
    }
    html.push("</ul>");
    return html.join("");
  };

  createServer = function(config) {
    var server, _path, _port;
    _path = config.path;
    _port = config.port;
    return server = http.createServer(function(req, res) {
      var pathname, realPath;
      pathname = url.parse(req.url).pathname;
      realPath = _path + pathname;
      /*support chinese filename or path
      		realPath = decodeURIComponent realPath
      */

      return path(exist);
      /*
      		fs.exists realPath,(exists)->
      			if not exists
      				res.writeHead 404,{"Content-Type":"text/plain"}
      				res.write "404 Not Found"
      				res.end()
      			else if fs.statSync(realPath).isDirectory()
      				fs.readdir realPath,(err,files)->
      					if err
      						res500 err,res
      					else
      						res.writeHead 200,{"Content-Type":types["html"]}
      						res.write insertSocket renderDir realPath,files
      						res.end()
      			else
      				ext=path.extname realPath
      				if ext
      					ext=ext.slice 1
      				else
      					ext="unknown"
      				res.setHeader "Content-Type",types[ext] or "text/plian"
      			
      				fs.readFile realPath,"binary",(err,file)->
      					if err
      						res500 err,res
      					else
      						res.writeHead 200,"Ok"
      						if ext is "html" or ext is "htm"
      							file=insertSocket file
      						res.write file,"binary"
      						res.end()
      	_sockets=[]
      	{sockets}=io.listen server
      	sockets.on "connection",(socket)->
      		_sockets.push socket
      	for change in ["fileCreated","fileModified","fileDeleted"]
      		watcher.on change,->
      			for socket in _sockets
      				socket.emit "reload"
      	server.listen _port
      	console.log "GOTO localhost:#{_port}!"
      
      exports.version="v0.0.2"
      exports.createServer=createServer
      */

    });
  };

}).call(this);
