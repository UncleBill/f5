// Generated by CoffeeScript 1.3.3
(function() {
  var SOCKET_TEMPLATE, STYLE_TEMPLATE, createServer, fs, http, insertSocket, io, path, renderDir, res500, types, url, watcher;

  http = require("http");

  io = require("socket.io");

  url = require("url");

  fs = require("fs");

  path = require("path");

  types = require("./mime").types;

  watcher = require("watch-tree-maintained").watchTree(".", {
    "ignore": "^\..*|~$|\\.swp$"
  });

  SOCKET_TEMPLATE = "<script src=\"/socket.io/socket.io.js\"></script>\n<script>\n    var socket = io.connect('http://localhost');\n    socket.on('reload', function (data) {\n        window.location.reload();\n    });\n</script>";

  STYLE_TEMPLATE = '<style type="text/css">\n    ul{padding:5px 8px; background:#F8F8F8; margin:5px; border: 1px solid #CACACA; border-radius:3px; box-shadow:0 0 5px #ccc;}\n    ul li{list-style-type:none; border-bottom:1px solid #eee; padding:3px;}\n    ul li a{color:#4183C4; text-decoration:none}\n    ul li a:hover{text-decoration:underline}\n    ul li span{background-image:url(http://pic.yupoo.com/island205/CjJzay6Y/BaDLi.png); display:inline-block; width:20px; height:14px; margin:0 3px}\n    ul li .folder{}\n    ul li .file{ background-position-y:18px;}\n</style>';

  insertSocket = function(file) {
    var index;
    index = file.indexOf("</body>");
    if (index === -1) {
      return file += SOCKET_TEMPLATE;
    } else {
      return file = file.slice(0, index) + SOCKET_TEMPLATE + file.slice(index);
    }
  };

  res500 = function(err, res) {
    res.writeHead(500, {
      "Content-Type": "text/plain"
    });
    return res.end(err);
  };

  renderDir = function(realPath, files) {
    var file, html, _i, _len;
    if (realPath[realPath.length - 1] !== "/") {
      realPath += "/";
    }
    html = [];
    html.push(STYLE_TEMPLATE);
    html.push("<ul>");
    if (realPath !== "./") {
      html.push("<li><span class='folder'></span><a href='../'>..</a></li>");
    }
    for (_i = 0, _len = files.length; _i < _len; _i++) {
      file = files[_i];
      if (fs.statSync(realPath + file).isDirectory()) {
        html.push("<li><span class='folder'></span><a href='./" + file + "/'>" + file + "</a></li>");
      } else {
        html.push("<li><span class='file'></span><a href='./" + file + "'>" + file + "</a></li>");
      }
    }
    html.push("</ul>");
    return html.join("");
  };

  createServer = function(config) {
    var change, server, _i, _len, _path, _port, _ref;
    _path = config.path;
    _port = config.port;
    server = http.createServer(function(req, res) {
      var pathname, realPath;
      pathname = url.parse(req.url).pathname;
      realPath = _path + pathname;
      realPath = decodeURIComponent(realPath);
      /*
      		path exist
      */

      return fs.exists(realPath, function(exists) {
        var ext, sockets, _io, _ref, _sockets;
        if (!exists) {
          res.writeHead(404, {
            "Content-Type": "text/plain"
          });
          res.write("404 Not Found");
          return res.end();
        } else if (fs.statSync(realPath).isDirectory()) {
          return fs.readdir(realPath, function(err, files) {
            if (err) {
              return res500(err, res);
            } else {
              res.writeHead(200, {
                "Content-Type": types["html"]
              });
              res.write(insertSocket(renderDir(realPath, files)));
              return res.end();
            }
          });
        } else {
          ext = path.extname(realPath);
          if (ext) {
            ext = ext.slice(1);
          } else {
            ext = "unknown";
          }
          res.setHeader("Content-Type", types[ext] || "text/plian");
          fs.readFile(realPath, "binary", function(err, file) {
            if (err) {
              return res500(err, res);
            } else {
              res.writeHead(200, "Ok");
              if (ext === "html" || ext === "htm") {
                file = insertSocket(file);
              }
              res.write(file, "binary");
              return res.end();
            }
          });
          _sockets = [];
          _io = (_ref = io.listen(server, {
            "log level": 0
          }), sockets = _ref.sockets, _ref);
          return sockets.on("connection", function(socket) {
            return _sockets.push(socket);
          });
        }
      });
    });
    _ref = ["fileCreated", "fileModified", "fileDeleted"];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      change = _ref[_i];
      watcher.on(change, function() {
        var socket, _j, _len1, _results;
        _results = [];
        for (_j = 0, _len1 = _sockets.length; _j < _len1; _j++) {
          socket = _sockets[_j];
          _results.push(socket.emit("reload"));
        }
        return _results;
      });
    }
    server.listen(_port);
    return console.log("f5 is on localhost:" + _port + " now.");
  };

  exports.version = "v0.0.2";

  exports.createServer = createServer;

}).call(this);
